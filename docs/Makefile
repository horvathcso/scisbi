# Minimal makefile for Sphinx documentation
#

# You can set these variables from the command line, and also
# from the environment for the first two.
SPHINXOPTS     =
SPHINXBUILD    ?= sphinx-build
SOURCEDIR      = .
BUILDDIR       = _build

# Define your package root relative to the docs directory
# THIS IS CRITICAL: Ensure this path points to your actual 'scisbi' package
PACKAGE_DIR    = ../src/scisbi # Adjusted based on your sys.path.insert(0, os.path.abspath("../src"))

# Define where apidoc will output its RST files (usually the SOURCEDIR)
APIDOC_OUTPUT  = $(SOURCEDIR)

# Put it first so that "make" without argument is like "make help".
help:
	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

.PHONY: help Makefile clean html

# Add a clean target for apidoc generated files
clean:
	@echo "Cleaning build directory..."
	rm -rf $(BUILDDIR)
	@echo "Cleaning auto-generated API files..."
	rm -f $(APIDOC_OUTPUT)/scisbi*.rst # Adjust 'scisbi' if your package name differs
	rm -f $(APIDOC_OUTPUT)/modules.rst # For the default 'modules.rst' apidoc generates
	rm -rf $(APIDOC_OUTPUT)/_autosummary # For files generated by autosummary directive


# Build HTML documentation
html:
	@echo "Running sphinx-apidoc to generate API stubs..."
	$(SPHINXBUILD) -M apidoc -o "$(APIDOC_OUTPUT)" "$(PACKAGE_DIR)" --force --implicit-namespaces --module-first
	@echo "Building Sphinx HTML documentation..."
	@$(SPHINXBUILD) -M html -D warnings_as_errors=0 "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

# Catch-all target: route all unknown targets to Sphinx using the new
# "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
%: Makefile
	@$(SPHINXBUILD) -M $@ -D warnings_as_errors=0 "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
